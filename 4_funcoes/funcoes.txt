
O que são funções?

• Funções são estruturas de códigos menores que são reaproveitadas durante a execução/construção de um programa;

• Principal objetivo: poupar repetição de código;

• Podem ser consideradas 'subprogramas';


Definindo uma função:

• Uma função tem uma estrutura um pouco mais complexa;

• Devemos declarar a função sempre com a palavra function; Uma função deve ter um nome;

• Pode conter argumentos/parâmetros, definidos entre (); O corpo da função é definido entre {};

• Geralmente uma função retorna um valor;

• É possível declarar funções em variáveis;

function escreverNoConsole(){
    console.log("Escrever no console");
}

escreverNoConsole();

const textoNoconsole = function escreverNoConsole(){
    console.log("Texto no console");
}

textoNoconsole();

const textPorParametro = function(texto){
    console.log(texto);
}

textPorParametro("Testando por parametro");

///////////////////////////////


Mais sobre funções

const soma = function(a, b) {
return a + b;
}

console.log(soma (3, 5));

const saudacao = function (nome) 
{ if(nome == "Matheus") {
return "Olá Matheus";
}
}
console.log(saudacao("Matheus"));


//////////////////////////////
Arrow Functions

• Uma outra forma de escrever funções;

• Bem utilizada nos frameworks modernos;

• Porém não deve substituir as functions por completo

const parOuImpar = (n) => {
return n % 2;
};
console.log(parOuImpar (3));

/////////////////////////////////



Mais sobre Arrow Functions

• Se só tem um parâmetro podemos remover os parênteses do argumento e o return;

• Se a expressão for pequena, pode até ser feita em uma linha sem prejudicar a leitura do código;


const raizQuadrada = (x) => {

return x * x;
}
const raizQuadrada2 = n => n * n;
console.log(raizQuadrada (2));
console.log(raizQuadrada2(4));

////////////////////////////////////////////////

Argumentos opcionais

• Podemos chamar uma função em JS sem o número igual de parâmetros determinados;
function nomeComIdade (nome, idade) {

if(idade === undefined) {
     console.log("Seu nome é " + nome);
} else {
console.log("Seu nome é " + nome + " e você tem " + idade
anos");
}
}
nomeSemIdade ("João");
nomeComIdade ("João", 42);

//////////////////////////////////////


Argumentos com valor default

• Podemos pre-determinar um valor para um argumento;

function repetirFrase(frase, n=2) {
     
     for(let x = 1; x <= n; x++) {
    console.log(frase + " " + x);
}
}
repetirFrase("Testando", 5);
repetirFrase("Só duas vezes");


//////////////////////////

Closure

• Uma função que se lembra do ambiente em que ela foi criada;

function armazenarSoma (x) {
    return y => x + y;
}

Let somal = armazenarSoma (3);
console.log(soma1(5)); // 8
Let soma2 = armazenarSoma (5);
console.log(soma2 (10)); // 15;

////////////////////////////////////


Recursion

• Uma funcionalidade que permite uma função se chamar novamente;

• Isso pode ser um problema caso a função se chame muitas vezes;

function retornarNumeroPar (n) {
if(n % 2 == 0) {
console.log("n agora é par: + n);
} else {
console.log(n);
retornarNumeroPar (n - 1);
}
}
retornarNumeroPar (33);


