
O que são expressões regulares?

• Uma forma de encontrar padrões em uma string;

• Por exemplo: validar se só tem números;

• Em vez de criarmos funções complexas, podemos encontrar dados
em texto por meio das expressões regulares;

• Também chamadas de regex;


////////////////////////////////////


Criando uma expressão regular:

• As expressões regulares no JS são um tipo de objeto;

• Podemos instancia-lo de duas formas;

•New RegExp e /.../;

• Let reg1 = new RegExp("test");

• Let reg2/test/;


////////////////////////////////////////////


Verificando padrões com regex:

• Depois da definição do padrão por meio da regex;

• Utilizamos o método test() para verificar se o padrão é retornado;

• Com isso vamos receber de resposta true or false, veja:

console.log(/testando/.test("ttttestandooooo"));

console.log(/testando/.test("asdtestasd"));

////////////////////////////////////////////////////////


Conjunto de caracteres:

• Podemos definir um conjunto de caracteres para encontrar por
regex;

• Basta por entre [];

• Com um traço podemos definir um intervalo também, veja:

console.log(/[123]/.test("Existe 123 aqui?"));

console.log(/[0-9]/.test("O número 8 está presente aqui?"));

/////////////////////////////////////////////////////////////


Caracteres especiais:

• \d - Qualquer dígito de caractere

• \w - Um caractere alfanumérico ("teste")

• \s - Qualquer caractere de espaço em branco

• \D - Caracteres que não são dígitos

• \W - Caractere não-alfanumérico

• \S - Caractere que não seja espaço em branco

• . - Qualquer caractere, menos nova linha


/////////////////////////////////////////////////////////////


Regex com caracteres especiais:

• Podemos utilizar os caracteres especiais de várias formas, veja:

• let ano = /\d\d\d\d/;

console.log(ano.test("05"));
console.log(ano.test("2019"));
console.log(ano.test("opa"));

let palavratres Letras = /\w\W\W/;

console.log(palavraTresLetras.test("dia"));

console.log(palavraTresLetras.test("ano"));

console.log(palavraTresLetras.test("oi"));

console.log(palavraTresLetras.test("teste"));


//////////////////////////////////////////////////


Operador not ^:

• Podemos escrever um set que aceitam tudo, menos alguns
caracteres com o not;

• Lembrando que combinações serão aceitas, o negado é apenas se
bate com o set;

• Mais adiante aprenderemos negar de outras formas;

let palavrasSemAeB = /[^123]/;

console.log(palavras SemAeB.test("1112"));

console.log(palavras SemAeB.test("14"));

console.log(palavrasSemAeB.test("1"));


//////////////////////////////////////////////////


Operador plus +:

• Quando um + está após alguma expressão, este elemento pode se
repetir mais de uma vez;

let muitosOuPoucosDigitos = /\d+/;

console.log(muitosOuPoucosDigitos.test("123"));

console.log(muitosOuPoucosDigitos.test("123456789"));

console.log(muitos OuPoucos Digitos.test(""));


//////////////////////////////////////////////////


Operador?

• Faz com que o dígito anterior seja opcional;

let opcional = /Prova\s?\d?/;

console.log(opcional.test("Prova"));

console.log(opcional.test("Prova 1"));

console.log(opcional.test("Prova 2"));


////////////////////////////////////////////////////



Ocorrência precisa:

• Inserir o número de ocorrência entre {};

let telefone = /\d{4,5}-\d{4}/;

console.log(telefone.test("4004-5050"));

console.log(telefone.test("99999-8080"));

console.log(telefone.test("999-999"));

console.log(telefone.test("9999-9"));


////////////////////////////////////////////////////


Método exec:

• O método exec nos retorna um objeto com algumas informações
sobre a regex;

• Se nada for encontrado, retorna null;

let teste = /\d+/.exec("O número 100");

console.log(teste);

console.log(teste.index);


////////////////////////////////////////////////////


Método match:

• O método match funciona de forma similar ao exec;

let teste = "0 número 100".match(/\d+/);

console.log(teste); console.log(teste.index);


////////////////////////////////////////////////////


Choice pattern

• Podemos colocar uma instrução na regex que funciona como um ||
(or) das condicionais;

let frutas = /\d+ (bananas maçãs | laranjas)/;


console.log(frutas.test("10 bananas"));

console.log(frutas.test("25 batatas"));

console.log(frutas.test("8 laranjas"));


////////////////////////////////////////////////////



Na prática: validando um domínio:

• Da seguinte forma, podemos validar um domínio:

let validarDominio =  /www.\w+\.com/com.br/;

console.log(validarDominio.test("www.google.com"));

console.log(validarDominio.test("www.teste"));

console.log(validarDominio.test("teste.com"));

console.log(validarDominio.test("www.horadecodar.com.br"));


////////////////////////////////////////////////////


Na prática: validando um e-mail:


let validarEmail =  /\w+@\w+\.\w+/;

console.log(validarEmail.test("teste@email.com"));
console.log(validarEmail.test("email@email.com"));
console.log(validarEmail.test("gabriel@email.com.br"));
console.log(validarEmail.test("email.com"));


////////////////////////////////////////////////////


Na prática: validando data de nascimento:

• Da seguinte forma, podemos validar uma data de nascimento:

let validarDataDeNasc = /^[0-9]{2}[/][0-9]{2}[/][0-9]{4}/;

console.log(validarDataDeNasc.test('25/12/2015'));
 
console.log(validarDataDeNasc.test('25/12/15'));

console.log(validarDataDeNasc.test('2/2/2015'));

console.log(validarDataDeNasc.test('30/02/1999'));


////////////////////////////////////////////////////