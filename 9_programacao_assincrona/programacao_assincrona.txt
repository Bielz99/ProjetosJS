
O que é programação assíncrona?

• Até agora programamos de uma maneira que uma ação acontecia após a outra;

• A programação assíncrona trabalha nesta questão, ações podem ser executadas ao tempo todo sem uma 'fila';

• Um exemplo: usuário está no checkout, manda salvar seu endereço na conta,
mas pode prosseguir para a finalização sem recarregar a página,
pois adicionar endereço ocorre de forma assíncrona;


////////////////////////////////////////////////////////////


Callbacks:

• Uma das vertentes a prog. Assíncrona é fazer ações que aconteçam
depois de um tempo por meio de callbacks;

• Callback é uma função que faz uma ação após algum acontecimento
no código;

• Podemos realizar um callback com a função setTimeout, veja:

console.log("Ainda não chamou o callback");

setTimeout(function() {

console.log("Chamou o callback");

}, 2000);

console.log("Ainda não chamou o callback");


////////////////////////////////////////////////////////////


Promises
• As promises são ações assíncronas que podem produzir um valor em algum momento no código;

• Uma forma de dizer a linguagem que um valor pode estar presente em um futuro do código;

• O objeto das promises é Promise, resolve é o método que resolve
uma Promise, o then é o que faz ela poder ser executada em um ponto futuro;

let promessa = Promise.resolve(4+8);

console.log('Algum código');

promessa.then((value) => console.log('A soma é ${value}`));


////////////////////////////////////////////////////////////


Falha nas Promises:

• Uma Promise pode falhar, podemos reter esse erro com um método
chamado catch;

• Com ele podemos exibir o erro no console, por exemplo, e fazer o debug no código;

let promiseErrada = Promise.resolve(new Error("Algo deu errado"));

promiseErrada.then((value) => console.log(value)) 
.catch(reason=> console.log("Erro:
+ reason));


////////////////////////////////////////////////////////////


Rejeitando Promises:

• Além do resolve, há o metodo reject;

• Que é quando determinada lógica não satisfaz nosso programą,
então podemos ir para outra com o reject, em vez do resolve;

• Resolve e reject terminam a Promise, ou seja, não podemos chamar
mais o then, por exemplo;

function verificarAlgo (num) {

return new Promise((resolve, reject) => { if (num == 2) {

resolve(console.log("O número é 2"));

} else {

reject(new Error("Falhou"));

}

})

}

verificarAlgo(3);

verificarAlgo(2):


////////////////////////////////////////////////////////////


Resolvendo várias Promises:

• Com o método all, podemos resolver várias promessas de uma vez
só;

• Ou seja passamos elas por array e quando a última for resolvida,
receberemos a resposta;

const pl = new Promise(function(resolve, reject) {


setTimeout(function() { resolve(100);

}, 2500);

})

const p2 = Promise.resolve(5);

const p3 = new Promise(function(resolve, reject) {
   resolve(10);
});
Promise.all([p1, p2, p3]).then((values) => console.log(values));


////////////////////////////////////////////////////////////


Async functions:

• Podemos criar funções assíncronas com a palavra reservada async;

• Elas retornam uma Promise;

• Se retornar algo, a promessa é resolvida, se der alguma exception a
promessa é rejeitada;

async function somar (a,b) {

return a + b;

}

somar (2,2).then(function(value) {

console.log(value);

});


////////////////////////////////////////////////////////////


Await

• Nas async functions, podemos determinar uma instrução await;

• Que vai esperar uma promise ser resolvida, para apresentar os.
resultados;

function somaComDelay(a,b) {

return new Promise(resolve => {
    setTimeout(function() {
       resolve(a + b);
      }, 2000);
});
}

async function soma (a,b,c,d) {

Let x = somaComDelay (a,b);

Let y = somaComDelay (c,d)

return await x + await y;

}

soma (2,4,6,8).then(y => console.log(y))


////////////////////////////////////////////////////////////


Generators

• Generators funcionam semelhantes as Promises;

• Onde ações podem ser pausadas e continuadas depois;

• Caracterizados pelo function* e yield, veja:

• O yield pode salvar o estado da variável;

function genTest() {

let id = 0;

while(true) {

yield id++;

}

}

Let criarId = genTest();

console.log(criar Id.next().value);

console.log(criar Id.next().value);